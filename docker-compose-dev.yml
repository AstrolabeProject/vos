version: '3.7'

services:
  traefik:
    image: traefik:v2.1.4
    command:
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=vos_net"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.swarmModeRefreshSeconds=60"
    ports:
      - 80:80
      - 7777:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  redis:
    image: redis:5.0-alpine
    command: redis-server --requirepass devpassword
    deploy:
      labels:
        - "traefik.enable=false"
      restart_policy:
        condition: none
    volumes:
      - redis:/data
    ports:
      - '6379:6379'


  pgdb:
    image: vosdb:devel
    deploy:
      labels:
        - "traefik.enable=false"
      restart_policy:
        condition: on-failure
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"


  celery:
    image: cuts:devel
    command: celery worker -l debug -A cuts.blueprints.img.tasks
    deploy:
      labels:
        - "traefik.enable=false"
      restart_policy:
        condition: none
    depends_on:
      - redis


  dals:
    image: dals:1H
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dals.rule=PathPrefix(`/dals`)"
        - "traefik.http.services.dals.loadbalancer.server.port=8080"
      restart_policy:
        condition: on-failure
    volumes:
      - ./images:/vos/images
    ports:
      - "8080:8080"
    depends_on:
      - pgdb


  cuts:
    image: cuts:devel
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.cuts.rule=PathPrefix(`/cuts`)"
        - "traefik.http.services.cuts.loadbalancer.server.port=8000"
      restart_policy:
        condition: none
    environment:
      PYTHONUNBUFFERED: 'true'
    volumes:
      - './images:/vos/images:ro'
    ports:
      - '8000:8000'
    depends_on:
      - celery


networks:
  default:
    name: vos_net
    attachable: true

volumes:
  pgdata:
  redis:
